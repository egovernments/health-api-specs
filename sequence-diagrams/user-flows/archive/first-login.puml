@startuml Login
Actor ->client: onInit (check for token if not present push the language screen)
client -> Page:  Client Pushes Language selection Screen 
hnote over Page : Language Screen. 


Page -> Bloc: onLoad() function invoked
Bloc -> Client_Connection_Check : check the client internet connection.
Client_Connection_Check --> Bloc: return boolean value (true/false) as response.
Bloc --> Page: Display a message if it returns false.  

hnote over Bloc : MDMS Bloc

group MDMS data StateInfo
Bloc -> Repository: Pass tenant &  egov-local module
hnote over Repository : MDMS Repository
Repository ->MDMS_Service: API call to MDMS service to fetch egov-local
MDMS_Service -->Bloc: MDMS data with consist of stateInfo.
Bloc-->client: Store the response MDMS data in client-Side
end



group Localization
Bloc -> Repository: Pass Locale & tenant  & modules (login-module)
Repository ->localization_Service: API call to Localization service to fetch Localization
MDMS_Service -->Bloc:  data  consist of Localization
Bloc--> Page: Store the response data in client-Side
end

client -> Page: Client Pushes Language selection Screen 
hnote over Page : Login Screen. 

group Auth
hnote over Page : Login Screen 
Page o\\-- Page: Auth Model

Page ->Bloc: On submitting userId, Password (auth Model)
hnote over Bloc : Auth Bloc
Bloc -> Repository: Data modeling for AuthService
hnote over Repository : Auth Repository
Repository -> Auth_service: API call to Auth service to fetch token
Auth_service -->Bloc: auth response data with consist of token and user Roles.
Bloc-->client: Store the token and user Roles in client-Side
Bloc-->Page: Navigate to home screen
end

==Home Screen ==

Page -> Bloc : every Time when the api call's the server. 
note right
{
  check for version. 
  if(service version > localversion)
}
end note


group MDMS data 
Bloc -> Repository: Pass tenant & field-app-configuration, project-task-configuration, project-types, service-registry, additional-field-schemas
hnote over Repository : MDMS Repository
Repository ->MDMS_Service: API call to MDMS service to fetch
MDMS_Service -->Bloc: MDMS data.
hnote over client : Client Storage.
Bloc-->client: Store the response MDMS data in client-Side
end



group Localization
Bloc -> Repository: Pass Locale & tenant & modules (all the modules)
Repository ->localization_Service: API call to Localization service to fetch Localization (all the modules)
MDMS_Service -->Bloc:  data  consist of Localization
hnote over client : Client Storage.
Bloc--> client: Store the response data in client-Side
end



group Fetching linked Projects
Page -> Bloc: onLoad()function invoked.
hnote over Bloc : Project Bloc
Bloc -> Repository : user id & tenant
hnote over Repository : Projects Repository
Repository ->project_Service: API call to Project service to fetch attached projects. (/project/staff/v1/_search)
project_Service -->Repository: project response data with consist of  assigned projects data.
Repository ->  project_Service : API call to Project service to fetch the details of projects (/project/v1/_search).
project_Service --> Bloc : project response data with consist of assigned projects details data.
hnote over client : Client Storage.
Bloc-->client: Store the response projects data in client-Side.
end



group Fetching assigned beneficiary against Projects
Page -> Bloc: onLoad()function invoked.
hnote over Bloc : Project Bloc
Bloc -> Repository : Pass user id & tenant & project id
hnote over Repository :Project Repository
Repository ->project_Service: API call to Project service to fetch attached beneficiary.
project_Service -->Bloc: Assigned beneficiary response data. 
hnote over client : Client Storage
Bloc-->client: Store the response beneficiary data in client-Side
end



group Fetching  Individuals and HouseHold + household Members Projects.
Page -> Bloc: onLoad()function invoked.
hnote over Bloc : Project Bloc
Bloc -> Repository : Pass  boundary code 
hnote over Repository : Registration Repository

Repository  -> individual_service : (/individual/v1/_search) by passing boundary code.
individual_service --> Bloc: push response to List of Individuals. 
Repository  -> household_service : (/household/v1/_search) by passing boundary code
individual_service --> Bloc: push to  List of HouseHold. 
Repository -> household_service : (/household/member/v1/_search) pass the boundary code and get all the household members.
household_service --> Bloc: push to  List of HouseHold Members.
hnote over client : Client Storage
Bloc-->client: Store the response Individuals + HouseHold + HouseHold Members:  data in client-Side
hnote over Repository : Individual Repository
end



group Fetching Task against  beneficiary ids
Page -> Bloc: onLoad()function invoked.
hnote over Bloc : Project Bloc
Bloc -> Repository : Pass tenant & each beneficiary id.
hnote over Repository :  Project Repository
Repository  -> individual_service : (/project/task/v1/_search) by passing tenant,project id & each beneficiary id.
individual_service --> Bloc: assigned Task . 
hnote over client : Client Storage
Bloc-->client: Store the response  of Task in client-Side
hnote over Repository : Project Repository
end

group  Display Home cards by Role and access
Page -> Bloc: loadStaticData() function invoked
hnote over Bloc : Home Walkthrough Bloc
Bloc -> client : Trigger to read Roles and Access from Client Store.
hnote over client : Client Storage
client --> Page : Roles and Access passed to Page. 
Bloc --> Page : return list of home cards.
Page o\\-- Page: Filter the Cards based on Roles and Access and Display.
end



@enduml


